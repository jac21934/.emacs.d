#ifndef NETWORK_H
#define NETWORK_H

//standard c++ libraries
#include <iostream>
#include <iomanip>
#include <math.h>
#include <fstream>
#include <string>
#include <vector>
#include <cstdlib>
#include <sstream>


//for parallelizing the code
#include <omp.h>

//useful functions
#include "uselib.h"

//random library
#include "random_lib.h"




#define DEBUG false
#define MIN_RES 0.0000001

using namespace std;

class network{

public:

    int test();



// In network_output.cpp
    void display();
    void display(ostream&);
    void display(ostream&, string);
    void save_net(string);
    void output_weight(int, int);
    void draw(string);
    int size();


    //In network_input.cpp
    double neuron_state(int, string);
    void set_neuron(int, double);
    void set_weight(int, int, double);
    void set_net_type(string);
    void set_learn_type(string);
    void set_all_neurons(double*);
    void no_self_interact();
    void set_all_weights(double**);
    void randomize_weights(double);
    void randomize_neurons();
    void clear_diagonal();
    void lower_triangular();
    void input_weights(string filename);
    int input_net(string filename);
    void set_input_degree(int);
    void set_output_degree(int);


// In network_init.cpp
    network();
    network(int);
    ~network();
//    void resize(int);

// In network
    void run();
    void update(string);
    void prune(double threshold);
    double ave_connectivity();
    double sum_neurons();
    
    double L1_norm();
    double std_dev();
    void update_weights(string);

    void update_weightsFF(string,int);

    void transpose();

    int bond_number();

    int in_degree(int);
    int out_degree(int);


// In network_avalanche.cpp

    void update_av();
    void update_av_parallel();

    void random_neuron_increase();
    void random_weight_increase();
    void update_inDegree();
    void update_outDegree();

		void avalanche_neuron_noise();
		
    int* inDegree;
    int* outDegree;



//public global variables:
    int max_turns;

private:
//In network_output.cpp
    bool net_recurrent();

// In network_input.cpp
    void check_input(ifstream& input);

    bool network_fired;

// In ???
    double trigger_sigmoid(double);
    double trigger_sign(double);
    double trigger_arctan(double);


//In network_init.cpp    
    void construct();
    void deconstruct();
    

//from random_lib.h
    Random random;

//Global Variables
    double** weight;
    double* neuron;
    int net_size;  

    double learning_rate;

    int fired_last_turn;
    int avalanche_sum;

    bool refractory;
    bool* refrac_vec;

    string net_type;
    string learn_type;

		int num_fired;

    double n_max;
    double av_h;
    double av_max;

    double neuron_noise_mean;
    double neuron_noise_width;

    double weight_noise_mean;
    double weight_noise_width;

		//for network_avalanche
		bool isUpState;
		double depol_strength;
		double old_depol_strength;
  

};


#endif
