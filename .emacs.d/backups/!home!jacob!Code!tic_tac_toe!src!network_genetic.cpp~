#include "network.h"

void network::gen_breed(network* netA, network* netB, vector<int> layers, double mut_rate, double mut_strength){

		deconstruct();
		net_size = 0;
		
		for(int i = 0; i < layers.size(); i++){
				net_size += layers[i];
		}
	
		construct();

		
		int width = 0;
		int height = 0;
		// for(int i = 0; i < layers.size(); i++){
		// 		if(i > 0){
		// 				height += layers[i-1];
		// 		}
		// 		width +=layers[i];
				
		// 		int layer_size = layers[i];

					
		// 		if(i < layers.size() - 1){
		// 				for(int j =  0; j < layers[i]; j++){
		// 						for(int k = 0; k < layers[i+1];k++){
		// 								weight[height+j][width+k] = netA->return_weight(height+j,width+k);
		// 						}
		// 				}
						
		// 		}
		// }


		for(int i = 0; i < net_size;i++){
				for(int j = 0; j < net_size;j++){
						weight[i][j] = netA->return_weight(i, j);
						if(abs(weight[i][j]) > MIN_RES){

								double r = random.random_real();
//								cout << r;
								if(r < mut_rate){
										double mut = random.random_interval(-mut_strength, mut_strength);
										//									cout << mut << endl;
										weight[i][j] += mut;
								}
								else{
///										cout << 0 << endl;
								}
								
						}
						
				}
				
		}

		
		int half_size  = 0;
		
		for(int i= 1; i < layers.size(); i++){
				half_size += layers[i]*layers[i-1];
		}
		


		while(half_size > 0){

				int i = random.random_int() % net_size;
				int j = random.random_int() % net_size;

				if(abs(netB->return_weight(i, j)) > MIN_RES){
						weight[i][j] = netB->return_weight(i, j);

						double r = random.random_real();
						//	cout << r;
						if(r < mut_rate){
								double mut = random.random_interval(-mut_strength, mut_strength);
								weight[i][j] += mut;
						}
						else{
								//		cout << " " << 0 << endl;
						}
						
						half_size--;
				}


		}

	 
		
		

		
		
}


void network::gen_create(vector<int> layers){

		net_size = 0;
	  
		for(int i = 0; i < layers.size(); i++){
				net_size += layers[i];
				
		}
		if(net_size >0){
				construct();
		}
		else{
				return;
		}
		
		int width = 0;
		int height = 0;
		for(int i = 0; i < layers.size(); i++){
				if(i > 0){
						height += layers[i-1];
				}
				width +=layers[i];
				
				int layer_size = layers[i];
				
				if(i < layers.size() - 1){
						for(int j = 0; j < layers[i]; j++){
								for(int k = 0; k < layers[i+1];k++){
										weight[height+j][width+k] = random.random_interval(-1, 1);
								}
						}
						
				}
		}

						
}

		

void network::gen_run(int insize){
//Iterate through layers, all but input neurons set to zero initialially.

		for(int i = insize; i < net_size; i++){
				double sum = 0;
				for(int j = i - 1; j >= 0; j--){
						sum += weight[j][i]*neuron[j];
				}
				neuron[i] = sum;
		}
		
}
