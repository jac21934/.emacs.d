% Created 2017-04-28 Fri 19:41
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\usepackage[usenames,dvipsnames,svgnames]{xcolor}
\usepackage{minted}
\author{Jacob Carroll}
\date{\today}
\title{Emacs Configuration File}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 26.0.50 (Org mode 8.2.10)}}
\begin{document}

\maketitle
\tableofcontents


\section*{Set Personal Information}
\label{sec-1}
Setting some personal information for ease of compilation into \LaTeX{} later on.
\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq user-full-name "Jacob Carroll"
			user-mail-address "jac21934@vt.edu"
			calendar-latitude 37.2
			calendar-longitude -80.4
			calendar-location-name "Blacksburg, VA")
\end{minted}

\section*{Environment Settings}
\label{sec-2}

Tell emacs to use Unicode-8.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(set-language-environment "UTF-8")
\end{minted}

Set startup window size.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 100))
\end{minted}

I don't like the startup splash, or the messages buffer.



\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq inhibit-startup-message t)
(setq-default message-log-max nil)
(kill-buffer "*Messages*")
\end{minted}

Get's rid of yes or no questions, replaces them with y or n.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(fset 'yes-or-no-p 'y-or-n-p)
\end{minted}


Set scrolling speed to not accelerate.



\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq mouse-wheel-progressive-speed nil)
\end{minted}

Sets the scratch message to be a helpful reminder for key bindings

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq initial-scratch-message 
";; [C-x C-f] Open [C-x C-s] Save [C-x s] Save as [C-x b] S/w buf [C-x k] Kill buf
;; [C-x 1] Del others [C-x 0] Del current [C-x 2/3] Split-H/V [C-x o] S/w window
;; [C-a/e] Begin/End of line [M-f/b] Next/Back word [C/M-v] Next/Back page
;; [C/M-d] Del char/word [C-s/r] search/r-search [M-%] replace")
\end{minted}

\section*{Repositories and File Loading}
\label{sec-3}
\subsection*{Repositories}
\label{sec-3-1}
Setting up the package archives

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
("marmalade" . "https://marmalade-repo.org/packages/") 
("melpa" . "https://melpa.org/packages/") 
("org" . "http://orgmode.org/elpa/") ) )
\end{minted}

\subsection*{Loading Files}
\label{sec-3-2}
This recursively loads all paths in \emph{elpa}. It was necessary for some reason.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(let ((default-directory (expand-file-name "~/.emacs.d/elpa/"))) 
 (setq load-path  
 (append 
 (let ((load-path (copy-sequence load-path)))
	 (append (copy-sequence (normal-top-level-add-to-load-path '(".")))
	 (normal-top-level-add-subdirs-to-load-path)))
				 load-path)))
\end{minted}

\section*{Directory Manager Settings}
\label{sec-4}

Setting up \texttt{NeoTree} and setting [f7] to toggle it. 

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(require 'neotree)
(global-set-key [f7] 'neotree-toggle)
\end{minted}

\section*{PDF-Tools}
\label{sec-5}
Turns \texttt{pdf-tools} on after startup

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'after-init-hook 'pdf-tools-install)
\end{minted}

\section*{General Programming Settings}
\label{sec-6}
Make emacs delete on selection

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(delete-selection-mode t)
\end{minted}

Set the default style to linux for c/c++ programming 

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq c-default-style "linux"
			c-basic-offset 4)
\end{minted}

Require line numbers in all programming models:

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'prog-mode-hook 'linum-mode)
\end{minted}

Smaller tab-width:

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq-default tab-width 2)
\end{minted}

Show matching parenthesis:

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'after-init-hook 'show-paren-mode)
\end{minted}
\section*{Org-Mode}
\label{sec-7}

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(require 'org)
\end{minted}

Setting up indenting and Greek characters for all \texttt{Org-mode} doc's.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'org-entities-pretty)
\end{minted}

\subsection*{Exporting}
\label{sec-7-1}

Allow export to markdown and beamer (for presentations).

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(require 'ox-md)
(require 'ox-beamer)
(require 'ox-twbs)
\end{minted}

Allow \texttt{babel} to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
	 (ruby . t)
	 (dot . t)
	 (gnuplot . t)))
\end{minted}

Don't ask before evaluating code blocks.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-confirm-babel-evaluate nil)
\end{minted}

Associate the ``dot'' language with the \texttt{graphviz-dot} major mode.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
\end{minted}

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-export-with-smart-quotes t)
\end{minted}
\subsubsection*{\TeX{} configuration}
\label{sec-7-1-1}

I rarely write \LaTeX{} directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq TeX-parse-self t)
\end{minted}

Always use \texttt{pdflatex} when compiling \LaTeX{} documents. I don't really have any
use for DVIs.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq TeX-PDF-mode t)
\end{minted}

Enable a minor mode for dealing with math (it adds a few useful key bindings),
and always treat the current file as the ``main'' file. That's intentional, since
I'm usually actually in an org document.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'LaTeX-mode-hook
					(lambda ()
						(LaTeX-math-mode)
						(setq TeX-master t)))
\end{minted}

\subsubsection*{Exporting to HTML}
\label{sec-7-1-2}

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-html-postamble nil)
\end{minted}

\subsubsection*{Exporting to PDF}
\label{sec-7-1-3}

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the \texttt{minted} package, but that package shells out to
\texttt{pygments} to do the actual work. \texttt{pdflatex} usually disallows shell commands;
this enables that.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-latex-pdf-process
			'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
				"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
				"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
\end{minted}

Include the \texttt{minted} package in all of my \LaTeX{} exports.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
\end{minted}

Include the \texttt{xcolors} package to all o my \LaTeX{} exports.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-to-list 'org-latex-packages-alist '("usenames,dvipsnames,svgnames" "xcolor"))
	;;(setq org-latex-listings 'minted)
\end{minted}



\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-latex-minted-options
					 '(("frame" "lines")
						 ("fontsize" "\\scriptsize")
						 ("bgcolor" "LightGray")))
\end{minted}

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq org-src-fontify-natively t)
\end{minted}

\section*{Backups}
\label{sec-8}
Backups are put in one directory.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
\end{minted}

\section*{Origami Mode}
\label{sec-9}
Sets up \texttt{Origami-mode} for c++ and \LaTeX{}, and sets up key-bindings

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'c++-mode-hook 'origami-mode)
(add-hook 'latex-mode-hook 'origami-mode)
(add-hook 'origami-mode-hook (lambda () (local-set-key (kbd "C-;") 'origami-recursively-toggle-node)))
(add-hook 'origami-mode-hook (lambda () (local-set-key (kbd "C-:") 'origami-toggle-all-nodes)))
\end{minted}

\section*{Visuals and Themes}
\label{sec-10}
Load the Tomorrow-eighties theme

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'after-init-hook (lambda () (load-theme 'sanityinc-tomorrow-eighties)))
\end{minted}

Turn on the nicer visual line mode.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'after-init-hook 'global-visual-line-mode)
\end{minted}

\section*{Predictive Text}
\label{sec-11}
Turns on \texttt{company-mode} on everywhere.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'after-init-hook 'global-company-mode)
\end{minted}

\section*{Compilation Shortcuts}
\label{sec-12}

Make \textbf{C-x C-a} compile in most programming modes.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'latex-mode-hook (lambda () (local-set-key "\C-x\C-a" 'tex-compile)))
(add-hook 'c++-mode-hook (lambda () (local-set-key "\C-x\C-a" 'compile)))
(add-hook 'fortran-mode-hook (lambda () (local-set-key "\C-x\C-a" 'compile)))
(add-hook 'c-mode-hook (lambda () (local-set-key "\C-x\C-a" 'compile)))
(add-hook 'emacs-lisp-mode-hook (lambda () (local-set-key "\C-x\C-a" 'eval-buffer)))
\end{minted}

\subsection*{Definition of the compile function}
\label{sec-12-1}
\texttt{C++-mode} definition.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'c++-mode-hook
	 (lambda ()
			(set (make-local-variable 'compile-command)
					 (let ((file (file-name-nondirectory buffer-file-name)))
					 (format "%s -o %s %s"
									 (or (getenv "CC") "g++")
									 (file-name-sans-extension file)
									 file)))))
\end{minted}

\texttt{Fortran-mode} definition.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(add-hook 'fortran-mode-hook
					(lambda ()
						(set (make-local-variable 'compile-command)
						(let ((file (file-name-nondirectory buffer-file-name)))
								 (format "%s -o %s %s"
											 (or (getenv "CC") "gfortran -ffree-form")
											 (file-name-sans-extension file)
											 file)))))
\end{minted}

\subsection*{Kill  Compilation Window}
\label{sec-12-2}
Gets rid of the annoying window if compilation is successful.

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(defun kill-compile-frame-if-successful (buffer string) 
	" kill a compilation buffer if succeeded without warnings " 
	(if (and 
			 (or (string-match "compilation" (buffer-name buffer)) 
					 (string-match "tex-shell" (buffer-name buffer))
					 )
			 (or (string-match "finished" string) 
					 (string-match "Transcript written")
					 )
			 (not 
				(with-current-buffer buffer 
					(search-forward "warning" nil t)))) 
			(run-with-timer 1 nil 
											'delete-other-windows 
											)))
(add-hook 'compilation-finish-functions 'kill-compile-frame-if-successful)
\end{minted}

\section*{Sensitivity Mode}
\label{sec-13}
A mode that never backs up or saves data

\begin{minted}[frame=lines,fontsize=\scriptsize,bgcolor=LightGray]{common-lisp}
(define-minor-mode sensitive-mode
	"For sensitive files like password lists.
It disables backup creation and auto saving.

With no argument, this command toggles the mode.
Non-null prefix argument turns on the mode.
Null prefix argument turns off the mode."
	;; The initial value.
	nil
	;; The indicator for the mode line.
	" Sensitive"
	;; The minor mode bindings.
	nil
	(if (symbol-value sensitive-mode)
		(progn
	;; disable backups
	(set (make-local-variable 'backup-inhibited) t) 
	;; disable auto-save
	(if auto-save-default
		(auto-save-mode -1)))
																				;resort to default value of backup-inhibited
		(kill-local-variable 'backup-inhibited)
																				;resort to default auto save setting
		(if auto-save-default
		(auto-save-mode 1))))
\end{minted}






\section*{Tables}
\label{sec-14}



A practice table

\begin{center}
\begin{tabular}{ll}
one & two\\
\hline
1 & 2\\
one & two\\
10$^{\text{0}}$ & 1+10$^{\text{0}}$\\
$\frac{1}{1}$ & $\frac{2}{1}$\\
 & \\
\end{tabular}
\end{center}
% Emacs 26.0.50 (Org mode 8.2.10)
\end{document}
