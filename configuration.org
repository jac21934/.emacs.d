#+TITLE: Emacs Configuration File
#+AUTHOR: Jacob Carroll
#+STARTUP: indent
#+OPTIONS: toc:t 
#+OPTIONS: num:nil
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/

* Personal Information
Setting some personal information for ease of compilation into LaTeX later on.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jacob Carroll"
        user-mail-address "jac21934@gmail.com"
        )
#+END_SRC
* Repositories and File Loading
** Repositories
Setting up the package archives
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/") 
                           ("melpa" . "https://melpa.org/packages/") 
                           ("org" . "http://orgmode.org/elpa/") 
                           ) 
        )
#+END_SRC 

Load available packages from repositories.
#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC
** Custom Variables
Set up temporary file to dump custom variables.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
* Environment Settings
** Miscellaneous Settings
Tell emacs to use Unicode-8.
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

Set start up window size to fullscreen.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC



I don't like the start up splash, or the messages buffer.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")
#+END_SRC

Get's rid of yes or no questions, replaces them with y or n.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Remove the tool bar.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

Remove the menu bar.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) 
#+END_SRC

Add a clock.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

Make emacs delete on selection
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)              
#+END_SRC

** Cursor
Turn off blinking cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC
** Powerline
Ensure =powerline= is installed.
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    )
#+END_SRC

Uses =powerline= for a more aesthetically pleasing minibuffer bar.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'powerline-default-theme)
  ;; (powerline-default-theme)
#+END_SRC

** Window settings
Ensure that =ace-window= is installed.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :defer t
    :ensure t
    )
#+END_SRC

Change windows using ace-window.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC
** Line number settings
I'll put the settings for line numbers here, but I'll leave the initialization of them to a case by case basis.

Lets change the format to have a space afterwards:
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%d ")
#+END_SRC

** Scrolling settings

Set scrolling speed to not accelerate.

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC 

When point goes outside the window, Emacs usually recenters the buffer point. I’m not crazy about that. This changes scrolling behavior to only scroll as far as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC 

** Scratch Message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC
* Helm
** Setup
Ensure that =helm= is installed.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    ;;:defer t
    :ensure t
    :init 
    (require 'helm-config)
    )
#+END_SRC


Change the default =helm-mode= command prefix to "C-c h".

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+END_SRC

Curl stuff.
#+BEGIN_SRC emacs-lisp
  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))
#+END_SRC

Various variables.
#+BEGIN_SRC emacs-lisp
  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)

#+END_SRC


Don't recursively spawn helm windows.
#+BEGIN_SRC emacs-lisp
  (defun helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))


  (add-hook 'helm-minibuffer-set-up-hook
            'helm-hide-minibuffer-maybe)
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)

  (helm-mode 1)
#+END_SRC

Fuzzy match /helm-M-x/.
#+BEGIN_SRC emacs-lisp
  (setq helm-M-x-fuzzy-match t)
#+END_SRC
** Redefined commands
*** M-x
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC
*** Open Files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC
*** Grep
Grep stuff.

#+BEGIN_SRC emacs-lisp
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
#+END_SRC
*** Searching
Make emacs search using /helm-swoop/
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :ensure t
    :defer t
    :bind  ( "C-s" . helm-swoop)
    )
#+END_SRC
*** Kill Ring Yanking
Swap emacs' original kill ring cycle "M-y" with helm's version.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC 
** Colors
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'user
                          `(helm-grep-file ((t (:foreground "SpringGreen")))))
#+END_SRC
* YASnippet
Ensuring that =YASnippet= is installed and always on.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :init
    (yas-global-mode 1)
    )
#+END_SRC
* Avy
Set up =Avy= for use.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :defer t
    :bind ("M-j" . avy-goto-char-2)
    )        
#+END_SRC
* Multiple Cursors
Setting up =multiple-cursors= with better rectangular editing.
#+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :defer t
      :bind (
             ( "C-c m" . mc/mark-next-like-this)
             ( "C-c n" . mc/mark-previous-like-this)
             ( "C-x SPC" . set-rectangular-region-anchor)
             )

      )
#+END_SRC


* Ibuffer
Replaces emacs' default buffer manager with =ibuffer=.
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :defer t
    :ensure t
    :bind ("C-x C-b" . ibuffer)
    )
#+END_SRC
* Visuals and Themes
** Current Theme
Handle the custom-theme stuff.
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
#+END_SRC

Ensure that  the tomorrow-eighties theme is installed and load it.
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :init 
    (add-hook 'after-init-hook (lambda () (load-theme 'sanityinc-tomorrow-eighties)))
    )
#+END_SRC


** Visual Line Mode

Turn on the nicer visual line mode. This wraps text when it reaches the end of the window, rather than extending the text past the screen.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-visual-line-mode)
#+END_SRC
* Directory Manager Settings
** Dired

These are the switches that get passed to /ls/ when =dired= gets a list of files. We’re using:

| Flag | Description                              |
|------+------------------------------------------|
| l    | Use the long listing format.             |
| h    | Use human-readable sizes.                |
| v    | Sort numbers naturally.                  |
| A    | Almost all. Doesn’t include ”.” or ”..”. |


#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhvA")
#+END_SRC 


Kill buffers of files/directories that are deleted in =dired=.
#+BEGIN_SRC emacs-lisp
  (setq dired-clean-up-buffers-too t)
#+END_SRC 

Always copy directories recursively instead of asking every time.
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC 

Ask before recursively deleting a directory, though.
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC 

** NeoTree
Setting up =NeoTree= and setting [f7] to toggle it. 
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer t
    :bind ([f7] . neotree-toggle)
    )
#+END_SRC

* PDF-Tools
Turns =pdf-tools= on after startup.
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :init 
    (pdf-tools-install)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    )
#+END_SRC

* Programming Settings
** General Settings

Require line numbers in all programming models:

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

Highlight the current line when programming.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC


Smaller tab-width:
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Show matching parenthesis:
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'show-paren-mode)
#+END_SRC

** C/C++ Settings
Set the default style to linux for c/c++ programming 
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC

** Python Settings

Require =indent-guide-mode= to use in python.
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :defer t
    :init   (add-hook 'python-mode-hook 'indent-guide-mode)
    )
#+END_SRC
** R Settings
Require =ess-mode=
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :defer t
    :init   (add-hook 'ess-mode-hook 'linum-mode)
    )
#+END_SRC
I also added line numbers to R because =ess-mode= is apparently not a programming mode

** Javascript settings
Require =js2-mode= and set =js2-mode= as the default javascript mode.
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer t
    :init (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    )
#+END_SRC
** Octave Settings
Make *.m files octave files.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+END_SRC
** Lua Settings
Use =lua-mode=
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t
    :init   (add-hook 'lua-mode-hook 'linum-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))
    )
#+END_SRC
Make .lua files lua files

* LaTeX
Turn on =linum-mode= for Latex.

#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook 'linum-mode)
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful key bindings),
and always treat the current file as the "main" file. 
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

* Org-Mode
** Initialization and Hooks
Org mode is already require in init.el.

Set up =org-mode='s encosing.
#+BEGIN_SRC emacs-lisp
  (setq org-export-coding-system 'utf-8)
#+END_SRC

Setting up indenting for all =Org-mode= doc's.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

Better bullets for org mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :init  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
#+END_SRC

Make org source blocks has syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make tabs act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Store my org files in ~/org, define the location of an index file (my main todo list), and archive finished tasks in ~/org/archive.org.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/.org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  ;;  (setq org-inbox-file "~/Dropbox/inbox.org")
  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
** Linking
Set org links to =C-c l=
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
** Agenda
Define some key-bindings.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Set up various agenda files.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/.org/"))
#+END_SRC

Setup *TODO* tree.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d!)" "CANCELED(c@)")))

#+END_SRC


Hitting C-c C-x C-s will mark a todo as done and move it to an appropriate place in the archive.
This was taken from Harry Schwartz's excellent config setup [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][here]].
#+BEGIN_SRC emacs-lisp
  (defun hrs/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

** Capturing

Set up =org-capture= stuff.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("w" "Work"
           entry
           (file+datetree  "~/.org/work.org")
           "* TODO %?\n")

          ("h" "home"
           entry
           (file+datetree  "~/.org/home.org")
           "* TODO %?\n")

          ("r" "Research"
           entry
           (file+datetree  "~/.org/research.org")
           "* TODO %?\n")
          ("n" "Notes"
           entry
           (file+headline+datetree  "~/.org/notes.org")
           "* %U \n  %?\n")
          ("c" "Code snippets"
           entry
           (file+headline  "~/.org/notes.org" "Code")
           "* %^{Name} \n %i \n")
          )
        )
#+END_SRC

** Exporting
Allow exporting twitter bootstrap webpages.
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
    :defer t
    )
#+END_SRC

** Visuals

I prefer the tables to be significantly different from the colors used as the indentations.
 
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'user
                          `(org-table ((t (:foreground "LightCoral")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'user
                          `(org-link ((t (:foreground "IndianRed")))))
#+END_SRC

|---------------+--------------|
| Example Table | [[Visuals][Example Link]] |
|---------------+--------------|

** Babel
Load all the various languages for =babel= to use.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (gnuplot . t)
     (shell . t)
     (python . t)
     ))
#+END_SRC

Disable asking for permission before evaluating.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Customizing source block shortcuts.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("ss" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

* E-books
Require =nov-mode= and set it up  to open automatically for .epub files.
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure t
    :defer  t
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    )
#+END_SRC
* Backups
Emacs has a tendency to litter directories with half a dozen backed up files. To minimize clutter, backups are put in one directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

* Origami Mode
Require =Origami-mode= and set it up for for C++ and LaTeX with key-bindings
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'origami-mode)
    (add-hook 'latex-mode-hook 'origami-mode)
    :bind (
           :map origami-mode-map
                ( "C-;" . origami-recursively-toggle-node)
                ( "C-:" . origami-toggle-all-nodes)
                )
    )
#+END_SRC

* Predictive Text
** Company Mode
Require =company-mode= and turn it on everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init   (add-hook 'after-init-hook 'global-company-mode)
    )
#+END_SRC

* Compilation Shortcuts
** Shortcuts
Make *C-x C-a* compile in +most programming modes+ latex.

#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook (lambda () (local-set-key "\C-x\C-a" 'tex-compile)))
#+END_SRC

